// <auto-generated />
using System;
using ExpressedRealms.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpressedRealms.DB.Migrations
{
    [DbContext(typeof(ExpressedRealmsDbContext))]
    [Migration("20251024064108_AddEventTables")]
    partial class AddEventTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExpressedRealms.DB.Characters.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte>("AgilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("AssignedXp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("assigned_xp");

                    b.Property<string>("Background")
                        .HasColumnType("text");

                    b.Property<byte>("ConstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("DexterityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("ExpressionId")
                        .HasColumnType("integer");

                    b.Property<int?>("FactionId")
                        .HasColumnType("integer");

                    b.Property<byte>("IntelligenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInCharacterCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_in_character_creation");

                    b.Property<bool>("IsPrimaryCharacter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary_character");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayerNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("player_number");

                    b.Property<int?>("PrimaryProgressionId")
                        .HasColumnType("integer")
                        .HasColumnName("primary_progression_id");

                    b.Property<int?>("SecondaryProgressionId")
                        .HasColumnType("integer")
                        .HasColumnName("secondary_progression_id");

                    b.Property<int>("StatExperiencePoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(72);

                    b.Property<byte>("StrengthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<byte>("WillpowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("AgilityId");

                    b.HasIndex("ConstitutionId");

                    b.HasIndex("DexterityId");

                    b.HasIndex("ExpressionId");

                    b.HasIndex("FactionId");

                    b.HasIndex("IntelligenceId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PrimaryProgressionId");

                    b.HasIndex("SecondaryProgressionId");

                    b.HasIndex("StrengthId");

                    b.HasIndex("WillpowerId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Characters.xpTables.CharacterXpMapping", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("XpSectionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("xp_section_type_id");

                    b.Property<int>("DiscretionXp")
                        .HasColumnType("integer")
                        .HasColumnName("discretion_xp");

                    b.Property<int>("LevelXp")
                        .HasColumnType("integer")
                        .HasColumnName("level_xp");

                    b.Property<int>("SectionCap")
                        .HasColumnType("integer")
                        .HasColumnName("section_cap");

                    b.Property<int>("SpentXp")
                        .HasColumnType("integer")
                        .HasColumnName("spent_xp");

                    b.Property<int>("TotalCharacterCreationXp")
                        .HasColumnType("integer")
                        .HasColumnName("total_character_creation_xp");

                    b.HasKey("CharacterId", "XpSectionTypeId");

                    b.HasIndex("XpSectionTypeId");

                    b.ToTable("character_xp_mapping", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Characters.xpTables.CharacterXpView", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<int>("DiscretionXp")
                        .HasColumnType("integer")
                        .HasColumnName("discretion_xp");

                    b.Property<int>("LevelXp")
                        .HasColumnType("integer")
                        .HasColumnName("level_xp");

                    b.Property<int>("SectionCap")
                        .HasColumnType("integer")
                        .HasColumnName("section_cap");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("section_name");

                    b.Property<int>("SectionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("section_type_id");

                    b.Property<int>("SpentXp")
                        .HasColumnType("integer")
                        .HasColumnName("spent_xp");

                    b.Property<int>("TotalCharacterCreationXp")
                        .HasColumnType("integer")
                        .HasColumnName("total_character_creation_xp");

                    b.Property<int>("TrueSectionCap")
                        .HasColumnType("integer")
                        .HasColumnName("true_section_cap");

                    b.Property<int>("TrueTotalSpent")
                        .HasColumnType("integer")
                        .HasColumnName("true_total_spent");

                    b.ToTable((string)null);

                    b.ToView("character_xp_view", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Characters.xpTables.XpSectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<int>("SectionCap")
                        .HasColumnType("integer")
                        .HasColumnName("creation_cap");

                    b.HasKey("Id");

                    b.ToTable("xp_section_type", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Blessings.BlessingLevelSetup.Audit.BlessingLevelAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_user_id");

                    b.Property<int>("BlessingId")
                        .HasColumnType("integer")
                        .HasColumnName("blessing_id");

                    b.Property<int>("BlessingLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("blessing_level_id");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("changed_properties");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("BlessingId");

                    b.HasIndex("BlessingLevelId");

                    b.ToTable("blessing_level_audit_trail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Blessings.BlessingLevelSetup.BlessingLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlessingId")
                        .HasColumnType("integer")
                        .HasColumnName("blessing_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("level");

                    b.Property<int?>("StatModifierGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("stat_modifier_group");

                    b.Property<int>("XpCost")
                        .HasColumnType("integer")
                        .HasColumnName("xp_cost");

                    b.Property<int>("XpGain")
                        .HasColumnType("integer")
                        .HasColumnName("xp_gain");

                    b.HasKey("Id");

                    b.HasIndex("BlessingId");

                    b.HasIndex("StatModifierGroupId");

                    b.ToTable("blessing_level", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Blessings.BlessingSetup.Audit.BlessingAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_user_id");

                    b.Property<int>("BlessingId")
                        .HasColumnType("integer")
                        .HasColumnName("blessing_id");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("changed_properties");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("BlessingId");

                    b.ToTable("blessing_audit_trail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Blessings.BlessingSetup.Blessing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("sub_category");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("blessing", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Blessings.CharacterBlessingMappings.CharacterBlessingMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlessingId")
                        .HasColumnType("integer")
                        .HasColumnName("blessing_id");

                    b.Property<int>("BlessingLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("blessing_level_id");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("notes");

                    b.HasKey("Id");

                    b.HasIndex("BlessingId");

                    b.HasIndex("BlessingLevelId");

                    b.HasIndex("CharacterId");

                    b.ToTable("character_blessing_mapping", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Events.EventScheduleItemsSetup.Audit.EventScheduleItemAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_user_id");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("changed_properties");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("EventScheduleItemId")
                        .HasColumnType("integer")
                        .HasColumnName("event_schedule_item_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventScheduleItemId");

                    b.ToTable("event_schedule_item_audit_trail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Events.EventScheduleItemsSetup.EventScheduleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.ToTable("event_schedule_item", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Events.EventSetup.Audit.EventAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_user_id");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("changed_properties");

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("EventId");

                    b.ToTable("event_audit_trail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Events.EventSetup.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalNotes")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("additional_notes");

                    b.Property<int>("ConExperience")
                        .HasColumnType("integer")
                        .HasColumnName("con_experience");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("WebsiteName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("website_name");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("website_url");

                    b.HasKey("Id");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionPublishStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("ExpressionPublishStatus", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSectionSetup.ExpressionSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExpressionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("SectionTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpressionId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SectionTypeId");

                    b.ToTable("ExpressionSections", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSectionSetup.ExpressionSectionAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExpressionId")
                        .HasColumnType("integer");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("ExpressionId");

                    b.HasIndex("SectionId");

                    b.ToTable("ExpressionSection_AuditTrail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("ExpressionSectionTypes", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("ExpressionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("expression_type_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("NavMenuImage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nav_menu_item");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("order_index");

                    b.Property<int>("PublishStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("publish_status_id");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("short_description");

                    b.HasKey("Id");

                    b.HasIndex("ExpressionTypeId");

                    b.HasIndex("PublishStatusId");

                    b.ToTable("expression", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.ExpressionAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExpressionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("ExpressionId");

                    b.ToTable("Expression_AuditTrail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("expression_type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Type for the expression menu",
                            Name = "Expression"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Holds all information regarding the system",
                            Name = "System Rules"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Holds all information regarding the Treasured Tales",
                            Name = "Treasured Tales"
                        });
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionLevels.Audit.ProgressionLevelAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_user_id");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("changed_properties");

                    b.Property<int>("ProgressionLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("progression_level_id");

                    b.Property<int>("ProgressionPathId")
                        .HasColumnType("integer")
                        .HasColumnName("progression_path_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("ProgressionLevelId");

                    b.HasIndex("ProgressionPathId");

                    b.ToTable("progression_level_audit_trail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionLevels.ProgressionLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("ProgressionPathId")
                        .HasColumnType("integer")
                        .HasColumnName("progression_path_id");

                    b.Property<int?>("StatModifierGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("stat_modifier_group");

                    b.Property<int>("XlLevel")
                        .HasColumnType("integer")
                        .HasColumnName("xl_level");

                    b.HasKey("Id");

                    b.HasIndex("ProgressionPathId");

                    b.HasIndex("StatModifierGroupId");

                    b.ToTable("progression_level", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionPaths.Audit.ProgressionPathAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_user_id");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("changed_properties");

                    b.Property<int>("ExpressionId")
                        .HasColumnType("integer")
                        .HasColumnName("expression_id");

                    b.Property<int>("ProgressionPathId")
                        .HasColumnType("integer")
                        .HasColumnName("progression_path_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("ExpressionId");

                    b.HasIndex("ProgressionPathId");

                    b.ToTable("progression_path_audit_trail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionPaths.ProgressionPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<int>("ExpressionId")
                        .HasColumnType("integer")
                        .HasColumnName("expression_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ExpressionId");

                    b.ToTable("progression_path", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.CharacterKnowledgeMappings.CharacterKnowledgeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KnowledgeId")
                        .HasColumnType("integer")
                        .HasColumnName("knowledge_id");

                    b.Property<int>("KnowledgeLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("knowledge_level_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("notes");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("KnowledgeId");

                    b.HasIndex("KnowledgeLevelId");

                    b.ToTable("character_knowledge_mapping", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.CharacterKnowledgeSpecializations.CharacterKnowledgeSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KnowledgeMappingId")
                        .HasColumnType("integer")
                        .HasColumnName("knowledge_mapping_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("notes");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeMappingId");

                    b.ToTable("character_knowledge_specialization", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.KnowledgeEducationLevels.KnowledgeEducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GeneralXpCost")
                        .HasColumnType("integer")
                        .HasColumnName("general_xp_cost");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SpecializationCount")
                        .HasColumnType("integer")
                        .HasColumnName("specialization_count");

                    b.Property<int>("StoneModifier")
                        .HasColumnType("integer")
                        .HasColumnName("stone_modifier");

                    b.Property<int>("TotalGeneralXpCost")
                        .HasColumnType("integer")
                        .HasColumnName("total_general_xp_cost");

                    b.Property<int>("TotalUnknownXpCost")
                        .HasColumnType("integer")
                        .HasColumnName("total_unknown_xp_cost");

                    b.Property<int>("UnknownXpCost")
                        .HasColumnType("integer")
                        .HasColumnName("unknown_xp_cost");

                    b.HasKey("Id");

                    b.ToTable("knowledge_education_level", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.KnowledgeModels.Audit.KnowledgeAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_user_id");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("changed_properties");

                    b.Property<int>("KnowledgeId")
                        .HasColumnType("integer")
                        .HasColumnName("knowledge_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("KnowledgeId");

                    b.ToTable("knowledges_audit_trail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.KnowledgeModels.Knowledge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("KnowledgeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("knowledge_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeTypeId");

                    b.ToTable("knowledge", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.KnowledgeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("knowledge_type", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.ModifierSystem.StatGroupMappings.StatGroupMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CreationSpecificBonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("creation_specific_bonus");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("modifier");

                    b.Property<bool>("ScaleWithLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("scales_with_level");

                    b.Property<int>("StatGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("stat_group_id");

                    b.Property<int>("StatModifierId")
                        .HasColumnType("integer")
                        .HasColumnName("stat_modifier_id");

                    b.Property<int?>("TargetExpressionId")
                        .HasColumnType("integer")
                        .HasColumnName("target_expression_id");

                    b.HasKey("Id");

                    b.HasIndex("StatGroupId");

                    b.HasIndex("StatModifierId");

                    b.HasIndex("TargetExpressionId");

                    b.ToTable("stat_group_mapping", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.ModifierSystem.StatModifierGroups.StatModifierGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("stat_modifier_group", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.ModifierSystem.StatModifiers.StatModifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("stat_modifier", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.CharacterPowerMappingSetup.CharacterPowerMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer")
                        .HasColumnName("character_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Notes")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("notes");

                    b.Property<int>("PowerId")
                        .HasColumnType("integer")
                        .HasColumnName("power_id");

                    b.Property<int>("PowerLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("power_level_id");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("PowerId");

                    b.HasIndex("PowerLevelId");

                    b.ToTable("character_power_mapping", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.Power", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte>("ActivationTimingTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte>("AreaOfEffectTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Cost")
                        .HasColumnType("text")
                        .HasColumnName("cost");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("DurationId")
                        .HasColumnType("smallint");

                    b.Property<string>("GameMechanicEffect")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPowerUse")
                        .HasColumnType("boolean");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<string>("Limitation")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<string>("OtherFields")
                        .HasColumnType("text");

                    b.Property<int>("PowerPathId")
                        .HasColumnType("integer")
                        .HasColumnName("power_path_id");

                    b.Property<int?>("StatModifierGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("stat_modifier_group");

                    b.HasKey("Id");

                    b.HasIndex("ActivationTimingTypeId");

                    b.HasIndex("AreaOfEffectTypeId");

                    b.HasIndex("DurationId");

                    b.HasIndex("LevelId");

                    b.HasIndex("PowerPathId");

                    b.HasIndex("StatModifierGroupId");

                    b.ToTable("power", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerActivationTimingType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("power_activation_timing_type", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerAreaOfEffectType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("power_area_of_effect_type", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("power_category", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerCategoryMapping", b =>
                {
                    b.Property<int>("PowerId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("PowerId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("power_category_mapping", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerDuration", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("power_duration", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<int>("TotalXp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_xp");

                    b.Property<int>("Xp")
                        .HasColumnType("integer")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.ToTable("power_level", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerPathSetup.PowerPath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ExpressionId")
                        .HasColumnType("integer")
                        .HasColumnName("expression_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.HasKey("Id");

                    b.HasIndex("ExpressionId");

                    b.ToTable("power_path", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerPathSetup.PowerPathAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_user_id");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("changed_properties");

                    b.Property<int>("ExpressionId")
                        .HasColumnType("integer")
                        .HasColumnName("expression_id");

                    b.Property<int>("PowerPathId")
                        .HasColumnType("integer")
                        .HasColumnName("power_path_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("ExpressionId");

                    b.HasIndex("PowerPathId");

                    b.ToTable("power_path_audit_trail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerPrerequisitePowerSetup.PowerPrerequisitePower", b =>
                {
                    b.Property<int>("PrerequisiteId")
                        .HasColumnType("integer")
                        .HasColumnName("prerequisite_id");

                    b.Property<int>("PowerId")
                        .HasColumnType("integer")
                        .HasColumnName("power_id");

                    b.HasKey("PrerequisiteId", "PowerId");

                    b.HasIndex("PowerId");

                    b.ToTable("power_prerequisite_power", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerPrerequisiteSetup.PowerPrerequisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PowerId")
                        .HasColumnType("integer")
                        .HasColumnName("power_id");

                    b.Property<int>("RequiredAmount")
                        .HasColumnType("integer")
                        .HasColumnName("required_amount");

                    b.HasKey("Id");

                    b.HasIndex("PowerId")
                        .IsUnique();

                    b.ToTable("power_prerequisite", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerSetup.Audit.PowerAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actor_user_id");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("changed_properties");

                    b.Property<int>("PowerId")
                        .HasColumnType("integer")
                        .HasColumnName("power_id");

                    b.Property<int>("PowerPathId")
                        .HasColumnType("integer")
                        .HasColumnName("power_path_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("PowerId");

                    b.HasIndex("PowerPathId");

                    b.ToTable("power_audit_trail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.CharacterSkillsMapping", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<byte>("SkillTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte>("SkillLevelId")
                        .HasColumnType("smallint");

                    b.HasKey("CharacterId", "SkillTypeId");

                    b.HasIndex("SkillLevelId");

                    b.HasIndex("SkillTypeId");

                    b.ToTable("CharacterSkillsMapping", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.ModifierType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("modifier_type", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.SkillLevel", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<byte>("Level")
                        .HasColumnType("smallint")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name");

                    b.Property<int>("TotalXp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("total_xp");

                    b.Property<int>("XP")
                        .HasColumnType("integer")
                        .HasColumnName("xp");

                    b.HasKey("Id");

                    b.ToTable("skill_level", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.SkillLevelBenefit", b =>
                {
                    b.Property<byte>("SkillLevelId")
                        .HasColumnType("smallint");

                    b.Property<byte>("SkillTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte>("ModifierTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte>("Modifier")
                        .HasColumnType("smallint");

                    b.HasKey("SkillLevelId", "SkillTypeId", "ModifierTypeId");

                    b.HasIndex("ModifierTypeId");

                    b.HasIndex("SkillTypeId");

                    b.ToTable("SkillLevelBenefit", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.SkillLevelDescriptionMapping", b =>
                {
                    b.Property<byte>("SkillLevelId")
                        .HasColumnType("smallint");

                    b.Property<byte>("SkillTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Everything is awesome!");

                    b.HasKey("SkillLevelId", "SkillTypeId");

                    b.HasIndex("SkillTypeId");

                    b.ToTable("SkillLevelDescriptionMapping", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.SkillSubType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("character varying(125)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("SkillSubType", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.SkillType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<byte>("SkillSubTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SkillSubTypeId");

                    b.ToTable("SkillType", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Statistics.StatDescriptionMapping", b =>
                {
                    b.Property<byte>("StatTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte>("StatLevelId")
                        .HasColumnType("smallint");

                    b.Property<string>("ReasonableExpectation")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.HasKey("StatTypeId", "StatLevelId");

                    b.HasIndex("StatLevelId");

                    b.ToTable("StatDescriptionMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Statistics.StatLevel", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer");

                    b.Property<int>("TotalXPCost")
                        .HasColumnType("integer");

                    b.Property<int>("XPCost")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("StatLevels");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Statistics.StatType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.HasKey("Id");

                    b.ToTable("StateTypes");
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.PlayerSetup.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.PlayerSetup.PlayerAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Player_AuditTrail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.Roles.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserRoles.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserRoles.UserRoleAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MappingUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("MappingUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles_AuditTrail", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.UserAuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActorUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChangedProperties")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActorUserId");

                    b.HasIndex("UserId");

                    b.ToTable("User_AuditTrail", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExpressedRealms.DB.Characters.Character", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Statistics.StatLevel", "AgilityStatLevel")
                        .WithMany("CharacterAgility")
                        .HasForeignKey("AgilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Statistics.StatLevel", "ConstitutionStatLevel")
                        .WithMany("CharacterConstitution")
                        .HasForeignKey("ConstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Statistics.StatLevel", "DexterityStatLevel")
                        .WithMany("CharacterDexterity")
                        .HasForeignKey("DexterityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", "Expression")
                        .WithMany("Characters")
                        .HasForeignKey("ExpressionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSectionSetup.ExpressionSection", "FactionInfo")
                        .WithMany("CharactersList")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ExpressedRealms.DB.Models.Statistics.StatLevel", "IntelligenceStatLevel")
                        .WithMany("CharacterIntelligence")
                        .HasForeignKey("IntelligenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.PlayerSetup.Player", "Player")
                        .WithMany("Characters")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionPaths.ProgressionPath", "PrimaryProgressionPath")
                        .WithMany("PrimaryProgressions")
                        .HasForeignKey("PrimaryProgressionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionPaths.ProgressionPath", "SecondaryProgressionPath")
                        .WithMany("SecondaryProgressions")
                        .HasForeignKey("SecondaryProgressionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ExpressedRealms.DB.Models.Statistics.StatLevel", "StrengthStatLevel")
                        .WithMany("CharacterStrength")
                        .HasForeignKey("StrengthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Statistics.StatLevel", "WillpowerStatLevel")
                        .WithMany("CharacterWillpower")
                        .HasForeignKey("WillpowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AgilityStatLevel");

                    b.Navigation("ConstitutionStatLevel");

                    b.Navigation("DexterityStatLevel");

                    b.Navigation("Expression");

                    b.Navigation("FactionInfo");

                    b.Navigation("IntelligenceStatLevel");

                    b.Navigation("Player");

                    b.Navigation("PrimaryProgressionPath");

                    b.Navigation("SecondaryProgressionPath");

                    b.Navigation("StrengthStatLevel");

                    b.Navigation("WillpowerStatLevel");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Characters.xpTables.CharacterXpMapping", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Characters.Character", "Character")
                        .WithMany("CharacterXpMappings")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Characters.xpTables.XpSectionType", "XpSectionType")
                        .WithMany("CharacterXpMappings")
                        .HasForeignKey("XpSectionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("XpSectionType");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Blessings.BlessingLevelSetup.Audit.BlessingLevelAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("BlessingLevelAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Blessings.BlessingSetup.Blessing", "Blessing")
                        .WithMany("BlessingLevelAuditTrails")
                        .HasForeignKey("BlessingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Blessings.BlessingLevelSetup.BlessingLevel", "BlessingLevel")
                        .WithMany("BlessingLevelAuditTrails")
                        .HasForeignKey("BlessingLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Blessing");

                    b.Navigation("BlessingLevel");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Blessings.BlessingLevelSetup.BlessingLevel", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Blessings.BlessingSetup.Blessing", "Blessing")
                        .WithMany("BlessingLevels")
                        .HasForeignKey("BlessingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.ModifierSystem.StatModifierGroups.StatModifierGroup", "StatModifierGroup")
                        .WithMany("BlessingLevels")
                        .HasForeignKey("StatModifierGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Blessing");

                    b.Navigation("StatModifierGroup");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Blessings.BlessingSetup.Audit.BlessingAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("BlessingAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Blessings.BlessingSetup.Blessing", "Blessing")
                        .WithMany("BlessingAuditTrails")
                        .HasForeignKey("BlessingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Blessing");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Blessings.CharacterBlessingMappings.CharacterBlessingMapping", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Blessings.BlessingSetup.Blessing", "Blessing")
                        .WithMany("CharacterBlessingMappings")
                        .HasForeignKey("BlessingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Blessings.BlessingLevelSetup.BlessingLevel", "BlessingLevel")
                        .WithMany("CharacterBlessingMappings")
                        .HasForeignKey("BlessingLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Characters.Character", "Character")
                        .WithMany("CharacterBlessingMappings")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blessing");

                    b.Navigation("BlessingLevel");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Events.EventScheduleItemsSetup.Audit.EventScheduleItemAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("EventScheduleItemAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Events.EventSetup.Event", "Event")
                        .WithMany("EventScheduleAuditTrails")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Events.EventScheduleItemsSetup.EventScheduleItem", "EventScheduleItem")
                        .WithMany("EventScheduleItemAuditTrails")
                        .HasForeignKey("EventScheduleItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Event");

                    b.Navigation("EventScheduleItem");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Events.EventSetup.Audit.EventAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("EventAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Events.EventSetup.Event", "Event")
                        .WithMany("EventAuditTrails")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSectionSetup.ExpressionSection", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", "Expression")
                        .WithMany("ExpressionSections")
                        .HasForeignKey("ExpressionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSectionSetup.ExpressionSection", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSectionType", "SectionType")
                        .WithMany("ExpressionSections")
                        .HasForeignKey("SectionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Expression");

                    b.Navigation("Parent");

                    b.Navigation("SectionType");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSectionSetup.ExpressionSectionAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("ExpressionSectionAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", "Expression")
                        .WithMany("SectionAudits")
                        .HasForeignKey("ExpressionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSectionSetup.ExpressionSection", "ExpressionSection")
                        .WithMany("SectionAudits")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Expression");

                    b.Navigation("ExpressionSection");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionType", "ExpressionType")
                        .WithMany("Expressions")
                        .HasForeignKey("ExpressionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionPublishStatus", "PublishStatus")
                        .WithMany("Expressions")
                        .HasForeignKey("PublishStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExpressionType");

                    b.Navigation("PublishStatus");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.ExpressionAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("ExpressionAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", "Expression")
                        .WithMany("ExpressionAudits")
                        .HasForeignKey("ExpressionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Expression");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionLevels.Audit.ProgressionLevelAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("ProgressionLevelAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionLevels.ProgressionLevel", "ProgressionLevel")
                        .WithMany("ProgressionLevelAuditTrails")
                        .HasForeignKey("ProgressionLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionPaths.ProgressionPath", "ProgressionPath")
                        .WithMany("ProgressionLevelAuditTrails")
                        .HasForeignKey("ProgressionPathId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("ProgressionLevel");

                    b.Navigation("ProgressionPath");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionLevels.ProgressionLevel", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionPaths.ProgressionPath", "ProgressionPath")
                        .WithMany("ProgressionLevels")
                        .HasForeignKey("ProgressionPathId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.ModifierSystem.StatModifierGroups.StatModifierGroup", "StatModifierGroup")
                        .WithMany("ProgressionLevels")
                        .HasForeignKey("StatModifierGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProgressionPath");

                    b.Navigation("StatModifierGroup");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionPaths.Audit.ProgressionPathAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("ProgressionPathAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", "Expression")
                        .WithMany("ProgressionPathAudits")
                        .HasForeignKey("ExpressionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionPaths.ProgressionPath", "ProgressionPath")
                        .WithMany("ProgressionPathAuditTrails")
                        .HasForeignKey("ProgressionPathId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Expression");

                    b.Navigation("ProgressionPath");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionPaths.ProgressionPath", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", "Expression")
                        .WithMany("ProgressionPaths")
                        .HasForeignKey("ExpressionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Expression");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.CharacterKnowledgeMappings.CharacterKnowledgeMapping", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Characters.Character", "Character")
                        .WithMany("CharacterKnowledgeMappings")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Knowledges.KnowledgeModels.Knowledge", "Knowledge")
                        .WithMany("CharacterKnowledgeMappings")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Knowledges.KnowledgeEducationLevels.KnowledgeEducationLevel", "KnowledgeLevel")
                        .WithMany("CharacterKnowledgeMappings")
                        .HasForeignKey("KnowledgeLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Knowledge");

                    b.Navigation("KnowledgeLevel");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.CharacterKnowledgeSpecializations.CharacterKnowledgeSpecialization", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Knowledges.CharacterKnowledgeMappings.CharacterKnowledgeMapping", "CharacterKnowledgeMapping")
                        .WithMany("CharacterKnowledgeSpecializations")
                        .HasForeignKey("KnowledgeMappingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CharacterKnowledgeMapping");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.KnowledgeModels.Audit.KnowledgeAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("KnowledgeAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Knowledges.KnowledgeModels.Knowledge", "Knowledge")
                        .WithMany("KnowledgeAuditTrails")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.KnowledgeModels.Knowledge", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Knowledges.KnowledgeType", "KnowledgeType")
                        .WithMany("Knowledges")
                        .HasForeignKey("KnowledgeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KnowledgeType");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.ModifierSystem.StatGroupMappings.StatGroupMapping", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.ModifierSystem.StatModifierGroups.StatModifierGroup", "StatModifierGroup")
                        .WithMany("StatGroupMappings")
                        .HasForeignKey("StatGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.ModifierSystem.StatModifiers.StatModifier", "StatModifier")
                        .WithMany("StatGroupMappings")
                        .HasForeignKey("StatModifierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", "Expression")
                        .WithMany("StatGroupMappings")
                        .HasForeignKey("TargetExpressionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Expression");

                    b.Navigation("StatModifier");

                    b.Navigation("StatModifierGroup");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.CharacterPowerMappingSetup.CharacterPowerMapping", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Characters.Character", "Character")
                        .WithMany("CharacterPowerMappings")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Powers.Power", "Power")
                        .WithMany("CharacterPowerMappings")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Powers.PowerLevel", "PowerLevel")
                        .WithMany("CharacterPowerMappings")
                        .HasForeignKey("PowerLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Power");

                    b.Navigation("PowerLevel");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.Power", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Powers.PowerActivationTimingType", "PowerActivationTimingType")
                        .WithMany("Powers")
                        .HasForeignKey("ActivationTimingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Powers.PowerAreaOfEffectType", "PowerAreaOfEffectType")
                        .WithMany("Powers")
                        .HasForeignKey("AreaOfEffectTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Powers.PowerDuration", "PowerDuration")
                        .WithMany("Powers")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Powers.PowerLevel", "PowerLevel")
                        .WithMany("Powers")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Powers.PowerPathSetup.PowerPath", "PowerPath")
                        .WithMany("Powers")
                        .HasForeignKey("PowerPathId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.ModifierSystem.StatModifierGroups.StatModifierGroup", "StatModifierGroup")
                        .WithMany("Powers")
                        .HasForeignKey("StatModifierGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PowerActivationTimingType");

                    b.Navigation("PowerAreaOfEffectType");

                    b.Navigation("PowerDuration");

                    b.Navigation("PowerLevel");

                    b.Navigation("PowerPath");

                    b.Navigation("StatModifierGroup");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerCategoryMapping", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Powers.PowerCategory", "Category")
                        .WithMany("PowerMappings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Powers.Power", "Power")
                        .WithMany("CategoryMappings")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerPathSetup.PowerPath", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", "Expression")
                        .WithMany("PowerPaths")
                        .HasForeignKey("ExpressionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Expression");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerPathSetup.PowerPathAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("PowerPathAudits")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", "Expression")
                        .WithMany("PowerPathAudits")
                        .HasForeignKey("ExpressionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Powers.PowerPathSetup.PowerPath", "PowerPath")
                        .WithMany("PowerPathAudits")
                        .HasForeignKey("PowerPathId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Expression");

                    b.Navigation("PowerPath");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerPrerequisitePowerSetup.PowerPrerequisitePower", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Powers.Power", "Power")
                        .WithMany("PrerequisitePowers")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Powers.PowerPrerequisiteSetup.PowerPrerequisite", "Prerequisite")
                        .WithMany("PrerequisitePowers")
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Power");

                    b.Navigation("Prerequisite");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerPrerequisiteSetup.PowerPrerequisite", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Powers.Power", "Power")
                        .WithOne("Prerequisite")
                        .HasForeignKey("ExpressedRealms.DB.Models.Powers.PowerPrerequisiteSetup.PowerPrerequisite", "PowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Power");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerSetup.Audit.PowerAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("PowerAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Powers.Power", "Power")
                        .WithMany("PowerAuditTrails")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Powers.PowerPathSetup.PowerPath", "PowerPath")
                        .WithMany("PowerAuditTrails")
                        .HasForeignKey("PowerPathId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Power");

                    b.Navigation("PowerPath");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.CharacterSkillsMapping", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Characters.Character", "Character")
                        .WithMany("CharacterSkillsMappings")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Skills.SkillLevel", "SkillLevel")
                        .WithMany("CharacterSkillsMappings")
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Skills.SkillType", "SkillType")
                        .WithMany("CharacterSkillsMappings")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("SkillLevel");

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.SkillLevelBenefit", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Skills.ModifierType", "ModifierType")
                        .WithMany("SkillLevelBenefits")
                        .HasForeignKey("ModifierTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Skills.SkillLevel", "SkillLevel")
                        .WithMany("SkillLevelBenefits")
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Skills.SkillType", "SkillType")
                        .WithMany("SkillLevelBenefits")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ModifierType");

                    b.Navigation("SkillLevel");

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.SkillLevelDescriptionMapping", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Skills.SkillLevel", "SkillLevel")
                        .WithMany("CharacterLevelDescriptions")
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Skills.SkillType", "SkillType")
                        .WithMany("CharacterLevelDescriptions")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SkillLevel");

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.SkillType", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Skills.SkillSubType", "SkillSubType")
                        .WithMany("SkillTypes")
                        .HasForeignKey("SkillSubTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SkillSubType");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Statistics.StatDescriptionMapping", b =>
                {
                    b.HasOne("ExpressedRealms.DB.Models.Statistics.StatLevel", "StatLevel")
                        .WithMany("StatDescriptionMappings")
                        .HasForeignKey("StatLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.Models.Statistics.StatType", "StatType")
                        .WithMany("StatDescriptionMappings")
                        .HasForeignKey("StatTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StatLevel");

                    b.Navigation("StatType");
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.PlayerSetup.Player", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "User")
                        .WithOne("Player")
                        .HasForeignKey("ExpressedRealms.DB.UserProfile.PlayerDBModels.PlayerSetup.Player", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.PlayerSetup.PlayerAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("PlayerAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.PlayerSetup.Player", "Player")
                        .WithMany("PlayerAuditTrails")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserRoles.UserRole", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserRoles.UserRoleAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("UserRoleAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "MappingUser")
                        .WithMany("MappedUserRoleAuditTrails")
                        .HasForeignKey("MappingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.Roles.Role", "Role")
                        .WithMany("UserRoleAuditTrails")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("MappingUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.UserAuditTrail", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "ActorUser")
                        .WithMany("UserAuditTrails")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", "User")
                        .WithMany("UserActorAuditTrails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActorUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExpressedRealms.DB.Characters.Character", b =>
                {
                    b.Navigation("CharacterBlessingMappings");

                    b.Navigation("CharacterKnowledgeMappings");

                    b.Navigation("CharacterPowerMappings");

                    b.Navigation("CharacterSkillsMappings");

                    b.Navigation("CharacterXpMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Characters.xpTables.XpSectionType", b =>
                {
                    b.Navigation("CharacterXpMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Blessings.BlessingLevelSetup.BlessingLevel", b =>
                {
                    b.Navigation("BlessingLevelAuditTrails");

                    b.Navigation("CharacterBlessingMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Blessings.BlessingSetup.Blessing", b =>
                {
                    b.Navigation("BlessingAuditTrails");

                    b.Navigation("BlessingLevelAuditTrails");

                    b.Navigation("BlessingLevels");

                    b.Navigation("CharacterBlessingMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Events.EventScheduleItemsSetup.EventScheduleItem", b =>
                {
                    b.Navigation("EventScheduleItemAuditTrails");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Events.EventSetup.Event", b =>
                {
                    b.Navigation("EventAuditTrails");

                    b.Navigation("EventScheduleAuditTrails");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionPublishStatus", b =>
                {
                    b.Navigation("Expressions");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSectionSetup.ExpressionSection", b =>
                {
                    b.Navigation("CharactersList");

                    b.Navigation("Children");

                    b.Navigation("SectionAudits");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSectionType", b =>
                {
                    b.Navigation("ExpressionSections");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionSetup.Expression", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("ExpressionAudits");

                    b.Navigation("ExpressionSections");

                    b.Navigation("PowerPathAudits");

                    b.Navigation("PowerPaths");

                    b.Navigation("ProgressionPathAudits");

                    b.Navigation("ProgressionPaths");

                    b.Navigation("SectionAudits");

                    b.Navigation("StatGroupMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ExpressionType", b =>
                {
                    b.Navigation("Expressions");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionLevels.ProgressionLevel", b =>
                {
                    b.Navigation("ProgressionLevelAuditTrails");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Expressions.ProgressionPathSetup.ProgressionPaths.ProgressionPath", b =>
                {
                    b.Navigation("PrimaryProgressions");

                    b.Navigation("ProgressionLevelAuditTrails");

                    b.Navigation("ProgressionLevels");

                    b.Navigation("ProgressionPathAuditTrails");

                    b.Navigation("SecondaryProgressions");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.CharacterKnowledgeMappings.CharacterKnowledgeMapping", b =>
                {
                    b.Navigation("CharacterKnowledgeSpecializations");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.KnowledgeEducationLevels.KnowledgeEducationLevel", b =>
                {
                    b.Navigation("CharacterKnowledgeMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.KnowledgeModels.Knowledge", b =>
                {
                    b.Navigation("CharacterKnowledgeMappings");

                    b.Navigation("KnowledgeAuditTrails");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Knowledges.KnowledgeType", b =>
                {
                    b.Navigation("Knowledges");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.ModifierSystem.StatModifierGroups.StatModifierGroup", b =>
                {
                    b.Navigation("BlessingLevels");

                    b.Navigation("Powers");

                    b.Navigation("ProgressionLevels");

                    b.Navigation("StatGroupMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.ModifierSystem.StatModifiers.StatModifier", b =>
                {
                    b.Navigation("StatGroupMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.Power", b =>
                {
                    b.Navigation("CategoryMappings");

                    b.Navigation("CharacterPowerMappings");

                    b.Navigation("PowerAuditTrails");

                    b.Navigation("Prerequisite");

                    b.Navigation("PrerequisitePowers");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerActivationTimingType", b =>
                {
                    b.Navigation("Powers");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerAreaOfEffectType", b =>
                {
                    b.Navigation("Powers");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerCategory", b =>
                {
                    b.Navigation("PowerMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerDuration", b =>
                {
                    b.Navigation("Powers");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerLevel", b =>
                {
                    b.Navigation("CharacterPowerMappings");

                    b.Navigation("Powers");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerPathSetup.PowerPath", b =>
                {
                    b.Navigation("PowerAuditTrails");

                    b.Navigation("PowerPathAudits");

                    b.Navigation("Powers");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Powers.PowerPrerequisiteSetup.PowerPrerequisite", b =>
                {
                    b.Navigation("PrerequisitePowers");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.ModifierType", b =>
                {
                    b.Navigation("SkillLevelBenefits");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.SkillLevel", b =>
                {
                    b.Navigation("CharacterLevelDescriptions");

                    b.Navigation("CharacterSkillsMappings");

                    b.Navigation("SkillLevelBenefits");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.SkillSubType", b =>
                {
                    b.Navigation("SkillTypes");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Skills.SkillType", b =>
                {
                    b.Navigation("CharacterLevelDescriptions");

                    b.Navigation("CharacterSkillsMappings");

                    b.Navigation("SkillLevelBenefits");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Statistics.StatLevel", b =>
                {
                    b.Navigation("CharacterAgility");

                    b.Navigation("CharacterConstitution");

                    b.Navigation("CharacterDexterity");

                    b.Navigation("CharacterIntelligence");

                    b.Navigation("CharacterStrength");

                    b.Navigation("CharacterWillpower");

                    b.Navigation("StatDescriptionMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.Models.Statistics.StatType", b =>
                {
                    b.Navigation("StatDescriptionMappings");
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.PlayerSetup.Player", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("PlayerAuditTrails");
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.Roles.Role", b =>
                {
                    b.Navigation("UserRoleAuditTrails");
                });

            modelBuilder.Entity("ExpressedRealms.DB.UserProfile.PlayerDBModels.UserSetup.User", b =>
                {
                    b.Navigation("BlessingAuditTrails");

                    b.Navigation("BlessingLevelAuditTrails");

                    b.Navigation("EventAuditTrails");

                    b.Navigation("EventScheduleItemAuditTrails");

                    b.Navigation("ExpressionAuditTrails");

                    b.Navigation("ExpressionSectionAuditTrails");

                    b.Navigation("KnowledgeAuditTrails");

                    b.Navigation("MappedUserRoleAuditTrails");

                    b.Navigation("Player");

                    b.Navigation("PlayerAuditTrails");

                    b.Navigation("PowerAuditTrails");

                    b.Navigation("PowerPathAudits");

                    b.Navigation("ProgressionLevelAuditTrails");

                    b.Navigation("ProgressionPathAuditTrails");

                    b.Navigation("UserActorAuditTrails");

                    b.Navigation("UserAuditTrails");

                    b.Navigation("UserRoleAuditTrails");
                });
#pragma warning restore 612, 618
        }
    }
}
