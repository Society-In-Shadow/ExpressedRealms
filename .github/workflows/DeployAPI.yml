name: Deploy API

on:
  push:
    branches: [main]
    paths:
      - 'api/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'api/**'

jobs:
  
  megalinter:
    name: MegaLinter
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push, comment issues & post new PR
      # Remove the ones you do not need
      contents: write
      issues: write
      pull-requests: write
    steps:
      # Git Checkout
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # If you use VALIDATE_ALL_CODEBASE = true, you can remove this line to improve performances

      # MegaLinter
      - name: MegaLinter
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://megalinter.io/flavors/
        uses: oxsecurity/megalinter/flavors/dotnet@v8.5.0
        env:
          # All available variables are described in documentation
          # https://megalinter.io/configuration/
          VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY
          # DISABLE: COPYPASTE,SPELL # Uncomment to disable copy-paste and spell checks

      # Upload MegaLinter artifacts
      - name: Archive production artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MegaLinter reports
          path: |
            megalinter-reports
            mega-linter.log

      - name: Upload MegaLinter scan results to GitHub Security tab
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'megalinter-reports/megalinter-report.sarif'
          
  build:
    name: Build .NET and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v3

      # Step 2: Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # Step 3: Restore and build .NET project
      - name: Restore dependencies
        run: dotnet restore ./api

      - name: Build
        run: dotnet build --no-restore ./api
  
  build_and_dockerize:
    name: Build .NET and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    if: github.ref == 'refs/heads/main'
    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v3

      # Step 2: Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # Step 3: Restore and build .NET project
      - name: Restore dependencies
        run: dotnet restore ./api

      - name: Build
        run: dotnet build --no-restore ./api

      # Step 4: Docker Login
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Extract metadata for Docker image (tags, labels)
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: noremacskich/expressedrealms-api

      # Step 6: Build and push Docker image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: noremacskich/expressedrealms-api:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          
      # Capture the digest of the pushed image
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: noremacskich/expressedrealms-api
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true


  deploy:
    name: Deploy To Production
    runs-on: ubuntu-latest
    needs: build_and_dockerize
    permissions:
      packages: write
      contents: read
      id-token: write

    if: github.ref == 'refs/heads/main' 

    steps:
      # Step 1: Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.EXPRESSEDREALMSAPI_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.EXPRESSEDREALMSAPI_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.EXPRESSEDREALMSAPI_AZURE_SUBSCRIPTION_ID }}

      # Step 2: Deploy Container to Azure
      - name: Build and Push Container to Azure
        uses: azure/container-apps-deploy-action@v2
        with:
          registryUrl: ${{ vars.EXPRESSEDREALMSFRONTEND_REGISTRY_URL }}
          registryUsername: ${{ secrets.EXPRESSEDREALMSFRONTEND_REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.EXPRESSEDREALMSAPI_REGISTRY_PASSWORD }}
          imageToDeploy: ${{ vars.EXPRESSEDREALMSFRONTEND_REGISTRY_URL }}/noremacskich/expressedrealms-api:${{ github.sha }}
          containerAppName: ca-expressedrealms-api
          resourceGroup: RG_ExpressedRealms
          environmentVariables: |
            ASPNETCORE_ENVIRONMENT=secretref:aspnetcore-environment
            AZURE_KEYVAULT_RESOURCEENDPOINT=secretref:azure-keyvault-resourceendpoint-dc543