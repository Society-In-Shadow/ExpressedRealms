---
name: Overall Github Actions Workflow

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: false
  IS_MAIN: ${{ always() }} #${{ github.ref == 'refs/heads/main' }}

on: # yamllint disable-line truthy
  push:
    branches: [main]
  pull_request:
    branches: [ '**' ]
    
jobs:
  
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    permissions: 
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            frontend:
              - 'client/**'
            backend:
              - 'api/**'

  megalinter:
    name: MegaLinter
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      issues: write
      pull-requests: write
      statuses: write
    steps:
      # Git Checkout
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # If you use VALIDATE_ALL_CODEBASE = true, you can remove this line to improve performances

      # MegaLinter
      - name: MegaLinter
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://megalinter.io/flavors/
        uses: docker://oxsecurity/megalinter@sha256:930b3dbfcfd6814db7e8462f335ebeae8dc1715aeaebb19b0414692ed9930145
        env:
          # All available variables are described in documentation
          # https://megalinter.io/configuration/
          VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY
          # DISABLE: COPYPASTE,SPELL # Uncomment to disable copy-paste and spell checks

      # Upload MegaLinter artifacts
      - name: Archive production artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MegaLinter reports
          path: |
            megalinter-reports
            mega-linter.log

      - name: Upload MegaLinter scan results to GitHub Security tab
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "megalinter-reports/megalinter-report.sarif"

  vitests:
    name: Run ViTests
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: "Install Node"
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: "Install Deps"
        working-directory: ./client
        run: npm install
      - name: "Test"
        working-directory: ./client
        run: npx vitest --coverage.enabled true
      - name: "Upload Coverage"
        uses: actions/upload-artifact@v4
        with:
          name: vitest-coverage
          path: ./client/coverage
      - name: "Report Coverage"
        # Set if: always() to also generate the report if tests are failing
        # Only works if you set `reportOnFailure: true` in your vite config as specified above
        if: always()
        uses: davelosert/vitest-coverage-report-action@8ab049ff5a2c6e78f78af446329379b318544a1a
        with:
          working-directory: ./client

  cypress-run-chrome:
    name: Run Cypress - Chrome
    runs-on: ubuntu-22.04
    permissions:
      checks: write
      pull-requests: write
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build ./client

      - name: Run Cypress Tests
        uses: cypress-io/github-action@b8ba51a856ba5f4c15cf39007636d4ab04f23e3c
        with:
          component: true
          working-directory: client
          publish-summary: "true"
          headed: false
          browser: chrome

      - name: Upload JUnit Results
        uses: actions/upload-artifact@v4
        with:
          name: cypress-test-results
          path: client/cypress/results/*.xml

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@3a74b2957438d0b6e2e61d67b05318aa25c9e6c6
        if: always()
        with:
          files: |
            client/cypress/results/*.xml
          check_name: Cypress Test Results # Optionally name the result set
          comment_title: Cypress Test Results Summary # Optional title for comments
          github_token: ${{ secrets.GITHUB_TOKEN }} # Used to interact with GitHub

  backend_unit_tests:
    name: Run xUnit Unit Tests
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v4

      # Step 2: Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Step 3: Restore and build .NET project
      - name: Restore dependencies
        run: dotnet restore ./api

      - name: Build
        run: dotnet build --no-restore ./api

      - name: Run Unit Tests
        run: dotnet test --no-restore ./api --logger trx

  sonarcloud-scan:
    name: Run SonarCloud Scan
    runs-on: windows-latest
    needs: changes
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu" # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Install DotCover
        run: dotnet tool install --global dotnet-coverage

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"Society-In-Shadow_ExpressedRealms" /o:"society-in-shadows" /d:sonar.token="$SONAR_TOKEN" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build ./api/ExpressedRealms.sln
          dotnet-coverage collect "dotnet test ./api --no-restore" -f xml -o "coverage.xml"
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="$SONAR_TOKEN"

  push_ui_to_docker_hub:
    name: Push UI to Docker Hub
    runs-on: ubuntu-latest
    needs: [cypress-run-chrome, vitests, backend_unit_tests, sonarcloud-scan]
    permissions:
      packages: write
      contents: read
      id-token: write
    if: ${{ always() && fromJSON(env.IS_MAIN) && needs.changes.outputs.frontend == 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # Pinned SHA for security
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7 # Pinned SHA for security
        with:
          images: noremacskich/expressedrealms-frontend

      - name: Build and Push Docker Image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # Pinned SHA for security
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: noremacskich/expressedrealms-frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  push_api_to_docker_hub:
    name: Push API to Docker Hub
    runs-on: ubuntu-22.04
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    needs: [cypress-run-chrome, vitests, backend_unit_tests, sonarcloud-scan]
    if: ${{ always() && fromJSON(env.IS_MAIN) && needs.changes.outputs.backend == 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # Pinned SHA for security
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7 # Pinned SHA for security
        with:
          images: noremacskich/expressedrealms-frontend

      - name: Build and Push Docker Image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        id: push
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: noremacskich/expressedrealms-api:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy_api_to_prod:
    name: Deploy API To Production
    runs-on: ubuntu-latest
    needs: [push_api_to_docker_hub, push_ui_to_docker_hub]
    permissions:
      packages: write
      contents: read
      id-token: write
      statuses: write

    if: ${{ always() && fromJSON(env.IS_MAIN) && needs.changes.outputs.backend == 'true' }}
    steps:
      # Step 1: Azure Login
      - name: Azure Login
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5
        with:
          client-id: ${{ secrets.EXPRESSEDREALMSAPI_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.EXPRESSEDREALMSAPI_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.EXPRESSEDREALMSAPI_AZURE_SUBSCRIPTION_ID }}

      # Step 2: Deploy Container to Azure
      - name: Build and Push Container to Azure
        uses: azure/container-apps-deploy-action@8dff69dac3367c32ceb2690d8f13adbeab462703
        with:
          registryUrl: ${{ vars.EXPRESSEDREALMSFRONTEND_REGISTRY_URL }}
          registryUsername: ${{ secrets.EXPRESSEDREALMSFRONTEND_REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.EXPRESSEDREALMSAPI_REGISTRY_PASSWORD }}
          imageToDeploy: ${{ vars.EXPRESSEDREALMSFRONTEND_REGISTRY_URL }}/noremacskich/expressedrealms-api:${{ github.sha }}
          containerAppName: ca-expressedrealms-api
          resourceGroup: RG_ExpressedRealms
          environmentVariables: ASPNETCORE_ENVIRONMENT=secretref:aspnetcore-environment AZURE_KEYVAULT_RESOURCEENDPOINT=secretref:azure-keyvault-resourceendpoint-dc543

  deploy_ui_to_prod:
    name: Deploy UI to Production
    runs-on: ubuntu-22.04
    needs: [push_api_to_docker_hub, push_ui_to_docker_hub, deploy_api_to_prod]
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    if: ${{ always() && fromJSON(env.IS_MAIN) && needs.changes.outputs.frontend == 'true' }}

    steps:
      - name: Azure Login
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5
        with:
          client-id: ${{ secrets.EXPRESSEDREALMSFRONTEND_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.EXPRESSEDREALMSFRONTEND_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.EXPRESSEDREALMSFRONTEND_AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Container to Azure
        uses: azure/container-apps-deploy-action@8dff69dac3367c32ceb2690d8f13adbeab462703
        with:
          registryUrl: ${{ vars.EXPRESSEDREALMSFRONTEND_REGISTRY_URL }}
          registryUsername: ${{ secrets.EXPRESSEDREALMSFRONTEND_REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.EXPRESSEDREALMSFRONTEND_REGISTRY_PASSWORD }}
          imageToDeploy: ${{ vars.EXPRESSEDREALMSFRONTEND_REGISTRY_URL }}/noremacskich/expressedrealms-frontend:${{ github.sha }}
          containerAppName: ca-expressedrealms-frontend
          resourceGroup: RG_ExpressedRealms

